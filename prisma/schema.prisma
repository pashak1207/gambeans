generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int          @unique @default(autoincrement()) @db.Integer
  name              String?
  phone             String
  email             String?
  role              Users_role   @default(USER)
  status            User_status  @default(ACTIVE)
  DOB               DateTime?
  avatar            String
  daily_code        String?
  prizes            User_prize[]
  visits            Visits[]
  cafe              Cafes?       @relation(fields: [cafe_id], references: [id])
  cafe_id           Int          @db.Integer
  verification_code String
  updated_at        DateTime     @updatedAt
  created_at        DateTime     @default(now())

  @@id([phone, cafe_id])
}

model Cafes {
  id            Int         @id @default(autoincrement()) @db.Integer
  name          String
  email         String      @unique
  address       String?
  logo          String
  color         String
  send_phone    String      @unique
  ftw           Int         @db.Integer
  link_eng      String?     @unique
  link_heb      String?     @unique
  env_version   Env_version @default(en)
  contact_phone String?
  contact_name  String?
  daily_code    String
  prizes        Prizes[]
  visits        Visits[]
  users         Users[]
  created_at    DateTime    @default(now())
}

model Visits {
  id         Int      @id @default(autoincrement()) @db.Integer
  user       Users    @relation(fields: [user_id], references: [id])
  user_id    Int      @db.Integer
  cafe       Cafes    @relation(fields: [cafe_id], references: [id])
  cafe_id    Int      @db.Integer
  visit_date DateTime @default(now())
}

model User_prize {
  id          Int       @id @default(autoincrement()) @db.Integer
  prize       Prizes    @relation(fields: [prize_id], references: [id])
  prize_id    Int       @db.Integer
  used        DateTime?
  opened      DateTime?
  is_won      Boolean   @default(false)
  is_slot_won Boolean   @default(true)
  user        Users     @relation(fields: [user_id], references: [id])
  user_id     Int       @db.Integer
  created_at  DateTime  @default(now())
  expires_at  DateTime?
}

model Prizes {
  id             Int          @id @default(autoincrement()) @db.Integer
  cafe           Cafes        @relation(fields: [cafe_id], references: [id])
  cafe_id        Int          @db.Integer
  max_amount     Int          @db.Integer
  current_amount Int          @db.Integer
  text           String
  image          String
  step_image     String
  type           Prize_type
  cost           Float
  revenue        Float
  probability    Float
  users          User_prize[]
  is_active      Boolean      @default(false)
  expires_at     Int          @default(1)
  created_at     DateTime     @default(now())
}

enum Users_role {
  ADMIN
  SUPERADMIN
  USER
}

enum User_status {
  ACTIVE
  BLOCKED
}

enum Prize_type {
  SCRATCH
  SLOT
  FIRST
  FREE
}

enum Env_version {
  he
  en
}
